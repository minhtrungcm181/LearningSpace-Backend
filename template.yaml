AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: LT Auth (signup/confirm/signin/me) + WebSocket 1-room (global)

Parameters:
  StageName:
    Type: String
    Default: dev
  UserPoolId:
    Type: String
  AppClientId:
    Type: String
  AppClientSecret:
    Type: String

Globals:
  Function:
    Runtime: provided.al2023
    Architectures: [arm64]
    Timeout: 10
    MemorySize: 128

Resources:
  #####################################
  # DynamoDB: lưu danh sách connection
  #####################################
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub "lt-socket-connections-${StageName}"
      AttributeDefinitions:
        - { AttributeName: roomId,       AttributeType: S }
        - { AttributeName: connectionId, AttributeType: S }
      KeySchema:
        - { AttributeName: roomId,       KeyType: HASH }
        - { AttributeName: connectionId, KeyType: RANGE }

  #####################################
  # HTTP API cho auth (giữ nguyên)
  #####################################
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['GET','POST','OPTIONS']
        AllowHeaders: ['*']
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              audience: [ !Ref AppClientId ]
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}"

  AuthFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "auth-fn-${StageName}"
      CodeUri: auth/
      Handler: bootstrap
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          APP_CLIENT_ID: !Ref AppClientId
          APP_CLIENT_SECRET: !Ref AppClientSecret
      Events:
        SignUp:
          Type: HttpApi
          Properties: { ApiId: !Ref HttpApi, Path: /auth/signup, Method: POST }
        Confirm:
          Type: HttpApi
          Properties: { ApiId: !Ref HttpApi, Path: /auth/confirm, Method: POST }
        SignIn:
          Type: HttpApi
          Properties: { ApiId: !Ref HttpApi, Path: /auth/signin, Method: POST }
        Me:
          Type: HttpApi
          Properties:
            { ApiId: !Ref HttpApi, Path: /me, Method: GET, Auth: { Authorizer: CognitoAuthorizer } }
    Metadata:
        BuildMethod: makefile
        BuildProperties:
          MakefilePath: auth/Makefile

  #####################################
  # WebSocket API (ApiGatewayV2)
  #####################################
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "lt-ws-${StageName}"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # Lambda cho $connect: ghi {roomId=global, connectionId}
  WsConnectFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "socket-connect-${StageName}"
      CodeUri: socket/connect/
      Handler: bootstrap
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy: { TableName: !Ref ConnectionsTable }
        - Statement:
            - Effect: Allow
              Action: execute-api:ManageConnections
              Resource: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${StageName}/POST/@connections/*"
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionsTable
          ROOM_ID: global
          COGNITO_USER_POOL_ID: !Ref UserPoolId
          COGNITO_APP_CLIENT_ID: !Ref AppClientId
        # fallback khi invoke không có requestContext (local/unit test)
          WS_CALLBACK_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
    Metadata:
      BuildMethod: makefile
      BuildProperties:
        MakefilePath: socket/connect/Makefile

  # Lambda cho $disconnect: xoá connection
  WsDisconnectFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "socket-disconnect-${StageName}"
      CodeUri: socket/disconnect/
      Handler: bootstrap
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy: { TableName: !Ref ConnectionsTable }
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionsTable
          ROOM_ID: global
    Metadata:
      BuildMethod: makefile
      BuildProperties:
        MakefilePath: socket/disconnect/Makefile

  # Lambda gửi broadcast: query room "global" và PostToConnection
  WsSendFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "socket-sendmessage-${StageName}"
      CodeUri: socket/send/
      Handler: bootstrap
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy: { TableName: !Ref ConnectionsTable }
        - Statement:
            - Effect: Allow
              Action: execute-api:ManageConnections
              Resource: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${StageName}/POST/@connections/*"
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionsTable
          ROOM_ID: global
          # fallback cho local/unit test
          WS_CALLBACK_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
    Metadata:
      BuildMethod: makefile
      BuildProperties:
        MakefilePath: socket/send/Makefile

  ##############
  # Integrations
  ##############
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsConnectFn.Arn}/invocations

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsDisconnectFn.Arn}/invocations

  SendIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsSendFn.Arn}/invocations

  #########
  # Routes
  #########
  RouteConnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub integrations/${ConnectIntegration}

  RouteDisconnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub integrations/${DisconnectIntegration}

  RouteSend:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: sendMessage
      AuthorizationType: NONE
      Target: !Sub integrations/${SendIntegration}

  ######################
  # Deployment + Stage
  ######################
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - RouteConnect
      - RouteDisconnect
      - RouteSend
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref StageName
      AutoDeploy: true
      DeploymentId: !Ref WebSocketDeployment

  ##########################
  # Permissions cho API GW
  ##########################
  PermConnect:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WsConnectFn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect"

  PermDisconnect:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WsDisconnectFn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect"

  PermSend:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WsSendFn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/sendMessage"

Outputs:
  ApiUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  WebSocketUrl:
    Description: wss URL cho client
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
  ConnectionsTableName:
    Value: !Ref ConnectionsTable
